// Generated by Dagger (https://dagger.dev).
package com.newproject.user;

import com.newproject.user.data.model.local.Preferenceshandler;
import com.newproject.user.data.model.local.UserSession;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<UserSession> userSessionProvider;

  private final Provider<Preferenceshandler> preferenceshandlerProvider;

  public MainViewModel_Factory(Provider<UserSession> userSessionProvider,
      Provider<Preferenceshandler> preferenceshandlerProvider) {
    this.userSessionProvider = userSessionProvider;
    this.preferenceshandlerProvider = preferenceshandlerProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(userSessionProvider.get(), preferenceshandlerProvider.get());
  }

  public static MainViewModel_Factory create(Provider<UserSession> userSessionProvider,
      Provider<Preferenceshandler> preferenceshandlerProvider) {
    return new MainViewModel_Factory(userSessionProvider, preferenceshandlerProvider);
  }

  public static MainViewModel newInstance(UserSession userSession,
      Preferenceshandler preferenceshandler) {
    return new MainViewModel(userSession, preferenceshandler);
  }
}
