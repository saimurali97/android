// Generated by Dagger (https://dagger.dev).
package com.newproject.user.di;

import com.newproject.user.network.auth.AuthApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideAuthApi$app_debugFactory implements Factory<AuthApi> {
  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvideAuthApi$app_debugFactory(Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public AuthApi get() {
    return provideAuthApi$app_debug(retrofitProvider.get());
  }

  public static NetworkModule_ProvideAuthApi$app_debugFactory create(
      Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvideAuthApi$app_debugFactory(retrofitProvider);
  }

  public static AuthApi provideAuthApi$app_debug(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideAuthApi$app_debug(retrofit));
  }
}
