// Generated by Dagger (https://dagger.dev).
package com.newproject.user.di;

import com.newproject.user.data.repository.auth.AuthRepository;
import com.newproject.user.network.auth.AuthApi;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideAuthRepositoryFactory implements Factory<AuthRepository> {
  private final Provider<AuthApi> authApiProvider;

  public RepositoryModule_ProvideAuthRepositoryFactory(Provider<AuthApi> authApiProvider) {
    this.authApiProvider = authApiProvider;
  }

  @Override
  public AuthRepository get() {
    return provideAuthRepository(authApiProvider.get());
  }

  public static RepositoryModule_ProvideAuthRepositoryFactory create(
      Provider<AuthApi> authApiProvider) {
    return new RepositoryModule_ProvideAuthRepositoryFactory(authApiProvider);
  }

  public static AuthRepository provideAuthRepository(AuthApi authApi) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideAuthRepository(authApi));
  }
}
