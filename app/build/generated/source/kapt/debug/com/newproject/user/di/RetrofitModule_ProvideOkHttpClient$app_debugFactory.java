// Generated by Dagger (https://dagger.dev).
package com.newproject.user.di;

import com.newproject.user.network.HeaderInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitModule_ProvideOkHttpClient$app_debugFactory implements Factory<OkHttpClient> {
  private final Provider<HeaderInterceptor> headerInterceptorProvider;

  public RetrofitModule_ProvideOkHttpClient$app_debugFactory(
      Provider<HeaderInterceptor> headerInterceptorProvider) {
    this.headerInterceptorProvider = headerInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient$app_debug(headerInterceptorProvider.get());
  }

  public static RetrofitModule_ProvideOkHttpClient$app_debugFactory create(
      Provider<HeaderInterceptor> headerInterceptorProvider) {
    return new RetrofitModule_ProvideOkHttpClient$app_debugFactory(headerInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient$app_debug(HeaderInterceptor headerInterceptor) {
    return Preconditions.checkNotNullFromProvides(RetrofitModule.INSTANCE.provideOkHttpClient$app_debug(headerInterceptor));
  }
}
