// Generated by Dagger (https://dagger.dev).
package com.newproject.user.view.ui.auth;

import com.newproject.user.data.model.local.Preferenceshandler;
import com.newproject.user.data.model.local.UserSession;
import com.newproject.user.data.repository.auth.AuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthViewModel_Factory implements Factory<AuthViewModel> {
  private final Provider<AuthRepository> authRepositoryProvider;

  private final Provider<Preferenceshandler> preferencesHandlerProvider;

  private final Provider<UserSession> userSessionProvider;

  private final Provider<String> noInternetStringProvider;

  public AuthViewModel_Factory(Provider<AuthRepository> authRepositoryProvider,
      Provider<Preferenceshandler> preferencesHandlerProvider,
      Provider<UserSession> userSessionProvider, Provider<String> noInternetStringProvider) {
    this.authRepositoryProvider = authRepositoryProvider;
    this.preferencesHandlerProvider = preferencesHandlerProvider;
    this.userSessionProvider = userSessionProvider;
    this.noInternetStringProvider = noInternetStringProvider;
  }

  @Override
  public AuthViewModel get() {
    return newInstance(authRepositoryProvider.get(), preferencesHandlerProvider.get(), userSessionProvider.get(), noInternetStringProvider.get());
  }

  public static AuthViewModel_Factory create(Provider<AuthRepository> authRepositoryProvider,
      Provider<Preferenceshandler> preferencesHandlerProvider,
      Provider<UserSession> userSessionProvider, Provider<String> noInternetStringProvider) {
    return new AuthViewModel_Factory(authRepositoryProvider, preferencesHandlerProvider, userSessionProvider, noInternetStringProvider);
  }

  public static AuthViewModel newInstance(AuthRepository authRepository,
      Preferenceshandler preferencesHandler, UserSession userSession, String noInternetString) {
    return new AuthViewModel(authRepository, preferencesHandler, userSession, noInternetString);
  }
}
